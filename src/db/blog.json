{ "_id" : { "$oid" : "50fc057c4f973120bc66f2a5" }, "status" : "published", "tags" : [ "python", "web.py", "Activist", "Web" ], "excerpt" : "\n                    很早以前就在使用[Lastpass](https://lastpass.com)进行密码管理，如自动生成复杂密码，Web页面自动填写和登陆；并且在去年开始付费（目前仅支付一年，主要是因为Android移动平台上lastpass免费版使用时间有限，仅16天）。 自[CSDN明文密码泄露](http://coolshell.cn/articles/6193.html)后，密码管理进一步加强，主要是加强密码复杂度，并且定期更换密码。很不幸的是，那时我的CSDN账户也在公布之列，后来一度想找回，无奈CSDN博客的ID已经从dylanninin变为dylan_ninin，心中还是稍有不悦。 最近在一些项目的测试过程中，发现复杂的密码其实有助于测试用户认证模块中很容易被忽视的小问题，尤其是在调用操作系统的命令时。 目前因密码包含特殊字符(如`&`)导致认证异常的情况，已经遇到过两例。\n                 ", "date" : { "$date" : 1358693756658 }, "categories" : [ "阅读" ], "count" : "100", "author" : { "url" : "http://www.dylanninin.com", "name" : "dylan" }, "url" : "the-importance-of-complex-passwords.html", "title" : "复杂密码的重要性", "content" : "\n<h1>写在前面的话</h1>\n\n<p>很早以前就在使用<a href=\"https://lastpass.com\">Lastpass</a>进行密码管理，如自动生成复杂密码，Web页面自动填写和登陆；并且在去年开始付费（目前仅支付一年，主要是因为Android移动平台上lastpass免费版使用时间有限，仅16天）。</p>\n\n<p>自<a href=\"http://coolshell.cn/articles/6193.html\">CSDN明文密码泄露</a>后，密码管理进一步加强，主要是加强密码复杂度，并且定期更换密码。很不幸的是，那是我的CSDN账户也在公布之列，后来一度想找回，无奈CSDN博客的ID已经从dylanninin变为dylan_ninin，心中还是稍有不悦。</p>\n\n<p>最近在一些项目的测试过程中，发现复杂的密码其实有助于测试用户认证模块中很容易被忽视的小问题，尤其是在调用操作系统的命令时。</p>\n\n<p>目前因密码包含特殊字符(如<code>&amp;</code>)导致认证异常的情况，已经遇到过两例。</p>\n\n<p>第一例，是在使用Java构建基于Samba文件共享的搜索系统时，因调用Windows系统的<code>net use \\samba_server_ip password /user:username</code>时，<code>password</code>没有加引号，导致密码复杂时无法成功认证。</p>\n\n<p>第二例，也是因少了引号，在Linux平台上同步修改LDAP和Samba密码，PHP调用<code>rtrim(shell_exec(\"/usr/bin/mkntpwd -N $new_pwd\"));</code>，如果<code>new_pwd</code>包含<code>&amp;</code>符号，<code>mkntpwd</code>就只能在后台运行，密码也就从<code>&amp;</code>处截断了。</p>\n\n<p>想想这些问题其实很简单，但也很容易被忽视。当然了，从发现这些问题的测试来看，一定复杂度的密码确实起到不少作用，至少一个很容易被忽视的死角马上就暴露出来了。</p>\n\n<h1>程序</h1>\n\n<p>因在日常工作中，有一部分是负责用户账号和权限分配，使用Lastpass自动生成密码容易导致密码繁多难以管理，且也有泄露的危险。于是动手写了一个简单的自动生成密码工具，主要使用Python的random和string标准库。</p>\n\n<p>程序主要配置在<code>passwdgen.py</code>的<code>config</code>中，可以自定义：</p>\n\n<pre><code>\"\"\"password generator config\"\"\"\nconfig={\n  'min':8,              #min length of password\n  'max':32,             #max length of password\n  'length':8,           #length of password to be generated\n  'cs':2,               #min number of characters in password\n  'ds':2,               #min number of digits in password\n  'ps':2,               #min number of punctuation in password\n  'users':[             #list of username to be assigned random password\n     'dylanninin',\n     'dylan',\n     'ninin'\n  ],\n  'log':{\n     'file':'passwdgen.log',\n     'format':'%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n   }\n}\n</code></pre>\n\n<p>运行效果如下：</p>\n\n<pre><code>$python passwdgen.py\nUSERNAME    PASSWORD  \ndylanninin  U'13Dz/m  \ndylan       `9K7x\\yJ  \nninin       8x%df-06\n</code></pre>\n\n<p>为避免清空控制台导致生成的密码忘记，已经做了日志记录，<code>passwdgen.log</code>：</p>\n\n<pre><code>2013-01-17 20:37:25,937 - root - INFO - password generation started ... ...\n2013-01-17 20:37:25,937 - root - INFO - USERNAME    PASSWORD  \n2013-01-17 20:37:25,937 - root - INFO - dylanninin  U'13Dz/m  \n2013-01-17 20:37:25,937 - root - INFO - dylan       `9K7x\\yJ  \n2013-01-17 20:37:25,937 - root - INFO - ninin       8x%df-06  \n2013-01-17 20:37:25,937 - root - INFO - password generation ended ... ...\n</code></pre>\n\n<p>源代码：<a href=\"https://github.com/dylanninin/utils/blob/master/passwdgen.py\">utils/passwdgen.py on github</a></p>\n\n<h1>参考</h1>\n\n<ul>\n<li><a href=\"http://coolshell.cn/articles/2428.html\">如何管理并设计你的口令</a></li>\n<li><a href=\"http://coolshell.cn/articles/6193.html\">CSDN明文口令泄露的启示</a></li>\n<li><a href=\"https://dazzlepod.com/csdn/?email=dylanninin%40gmail.com\">CSDN明文密码 dylanninin@gmail.com</a></li>\n<li><a href=\"http://coolshell.cn/articles/3801.html\">破解你的口令</a></li>\n</ul>\n                 ", "more" : "nothing to do" }
{ "_id" : { "$oid" : "50fc064e4f973123ac1dc346" }, "status" : "published", "tags" : [ "python", "web.py", "Activist", "Web" ], "excerpt" : "\n最近虚拟化服务器出现时钟同步异常：定时同步，但发现时间比个人电脑时间相差10几个小时。看了下鸟哥的私房菜，觉得没太大问题，于是决定测试NTP服务以排查问题。因网络限制，无法连接到互联网，就采用其中的一台虚拟机作为NTP服务器，并以本机时间为准。测试后才知道原来是系统安装时没有选择时区（默认为美国纽约），而使用的NTP服务器时区为中国，所以导致虚拟化服务器时间相差13个小时。\n                 ", "date" : { "$date" : 1358693966389 }, "categories" : [ "阅读" ], "count" : "100", "author" : { "url" : "http://www.dylanninin.com", "name" : "dylan" }, "url" : "a-case-of-ntp-sync-exception.html", "title" : "NTP同步异常一例", "content" : "\n <h1>写在前面的话</h1>\n\n<p>最近虚拟化服务器出现时钟同步异常：定时同步，但发现时间比个人电脑时间相差10几个小时。看了下鸟哥的私房菜，觉得没太大问题，于是决定测试NTP服务以排查问题。因网络限制，无法连接到互联网，就采用其中的一台虚拟机作为NTP服务器，并以本机时间为准。测试后才知道原来是系统安装时没有选择时区（默认为美国纽约），而使用的NTP服务器时区为中国，所以导致虚拟化服务器时间相差13个小时。</p>\n\n<p>从这次经历，再次得到一些经验教训：</p>\n\n<ul>\n<li>安装Linux时注意选择合适的时区。</li>\n<li>仔细阅读官方文档，这些才是最权威的文档。</li>\n<li>结合理论进行测试，绝知此事要躬行。</li>\n<li>要掌握一个理论，不是一朝一夕之事。</li>\n</ul>\n\n<h1>搭建NTP服务器</h1>\n\n<h2>主要配置</h2>\n\n<p>启用本机时钟作为NTP基准时间，主要需取消注释<code>server  127.127.1.0 # local clock</code>和<code>fudge 127.127.1.0 stratum 10</code>。</p>\n\n<p>完整配置如下：</p>\n\n<pre><code>[root@server ~]# cat /etc/ntp.conf\n# For more information about this file, see the man pages\n# ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).\n\ndriftfile /var/lib/ntp/drift\n\n# Permit time synchronization with our time source, but do not\n# permit the source to query or modify the service on this system.\n#restrict default kod nomodify notrap nopeer noquery\n#restrict -6 default kod nomodify notrap nopeer noquery\n\n# Permit all access over the loopback interface.  This could\n# be tightened as well, but to do so would effect some of\n# the administrative functions.\n\n# Hosts on local network are less restricted.\nrestrict 192.168.1.0 mask 255.255.255.0 nomodify notrap\n\n# Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\n#server 0.centos.pool.ntp.org\n#server 1.centos.pool.ntp.org\n#server 2.centos.pool.ntp.org\n\n#broadcast 192.168.1.255 autokey    # broadcast server\n#broadcastclient            # broadcast client\n#broadcast 224.0.1.1 autokey        # multicast server\n#multicastclient 224.0.1.1      # multicast client\n#manycastserver 239.255.254.254     # manycast server\n#manycastclient 239.255.254.254 autokey # manycast client\n\n# Undisciplined Local Clock. This is a fake driver intended for backup\n# and when no outside source of synchronized time is available. \nserver  127.127.1.0 # local clock\nfudge   127.127.1.0 stratum 10  \n\n# Enable public key cryptography.\n#crypto\n\nincludefile /etc/ntp/crypto/pw\n\n# Key file containing the keys and key identifiers used when operating\n# with symmetric key cryptography. \nkeys /etc/ntp/keys\n\n# Specify the key identifiers which are trusted.\n#trustedkey 4 8 42\n\n# Specify the key identifier to use with the ntpdc utility.\n#requestkey 8\n\n# Specify the key identifier to use with the ntpq utility.\n#controlkey 8\n\n# Enable writing of statistics records.\n#statistics clockstats cryptostats loopstats peerstats\n</code></pre>\n\n<h2>开启服务</h2>\n\n<p>开启ntp服务</p>\n\n<pre><code>[root@server ~]# service ntpd restart\nShutting down ntpd:                                        [  OK  ]\nStarting ntpd:                                             [  OK  ]\n</code></pre>\n\n<p>注意：</p>\n\n<p>每次重启NTP服务之后大约要5分钟客户端才能建立正常的NTP通讯连接，否则在执行ntpdate时候将返回：</p>\n\n<pre><code>[root@oradb ~]# ntpdate -d 192.168.1.162\n... ...\n192.168.1.162: Server dropped: strata too high\nserver 192.168.1.162, port 123\nstratum 16, precision -23, leap 11, trust 000\n... ...\n8 Jan 19:28:07 ntpdate[17795]: no server suitable for synchronization found\n</code></pre>\n\n<p>在ntp客户端用<code>ntpdate -d</code>查看，发现有&#8221;Server dropped: strata too high&#8221;的错误，并且显示&#8221;stratum 16&#8221;。而正常情况下stratum这个值得范围是&#8221;0~15&#8221;。</p>\n\n<p>这是因为NTP server还没有和其自身或者它的server同步上。详见<a href=\"http://www.blogjava.net/spray/archive/2008/07/10/213964.html\">NTP常见错误</a>。</p>\n\n<hr />\n\n<h1>同步测试</h1>\n\n<h2>1. NTP服务器(192.168.1.162)</h2>\n\n<p>当前时间：</p>\n\n<pre><code>[root@server ~]# date\nTue Jan  8 19:32:42 EST 2013\n</code></pre>\n\n<h2>2. NTP客户端时间(192.168.1.163)：</h2>\n\n<p>当前时间：</p>\n\n<pre><code>[root@oradb ~]# date\nTue Jan  8 19:33:37 EST 2013\n</code></pre>\n\n<p>与192.168.1.162同步：</p>\n\n<pre><code>[root@oradb ~]# ntpdate 192.168.1.162\n 8 Jan 19:33:51 ntpdate[24174]: adjust time server 192.168.1.162 offset -0.000002 sec\n</code></pre>\n\n<p>与172.31.1.1同步，时间滞后，大概是13个小时：</p>\n\n<pre><code>[root@oradb ~]# ntpdate 172.31.1.1\n 8 Jan 06:34:10 ntpdate[24270]: step time server 172.31.1.1 offset -46801.549132 sec\n</code></pre>\n\n<p>在与172.31.1.1同步时，出现时钟同步异常，因与192.168.1.162同步的时钟相差太大。导致这种情况大致推测有两个原因：1）172.31.1.1上时间不对；2）192.168.1.162、163时间不对。不过这两点很快都被排除了，经过同事提点，查看<a href=\"http://linux.vbird.org/linux_server/0440ntp.php\">鸟哥的私房菜</a>，对比<a href=\"http://www.timedate.cn/time/time_diff.asp\">世界时差表</a>，才知道是192.168.1.162、163系统的时区不正确。由于系统安装时没有选择时区（默认为美国纽约），与中国上海大概相差13个小时。</p>\n\n<h2>3.调整时区</h2>\n\n<p>系统当前时区</p>\n\n<pre><code>[root@server ~]# cat /etc/sysconfig/clock.20130109 \n# The time zone of the system is defined by the contents of /etc/localtime.\n# This file is only for evaluation by system-config-date, do not rely on its\n# contents elsewhere.\nZONE=\"America/New York\"\n</code></pre>\n\n<p>调整后系统时区</p>\n\n<pre><code>[root@server ~]# cat /etc/sysconfig/clock\n# The time zone of the system is defined by the contents of /etc/localtime.\n# This file is only for evaluation by system-config-date, do not rely on its\n# contents elsewhere.\nZONE=\"Asia/Shanghai\"\n</code></pre>\n\n<p>调整后时，再次与172.31.1.1同步：</p>\n\n<pre><code>[root@oradb ~]# date\nWed Jan  9 21:59:23 CST 2013\n[root@oradb ~]# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \ncp: overwrite `/etc/localtime'? y\n[root@oradb ~]# clock -w\n[root@oradb ~]# date\nWed Jan  9 21:59:53 CST 2013\n[root@oradb ~]# ntpdate 172.31.1.1\n 9 Jan 09:04:46 ntpdate[5898]: step time server 172.31.1.1 offset -46801.989143 sec\n</code></pre>\n\n<p>设置定时同步</p>\n\n<pre><code>[root@server ~]# crontab -l\n00 07 * * *  /usr/sbin/ntpdate 172.31.1.1 &amp;&amp; /sbin/hwclock -w\n</code></pre>\n\n<hr />\n\n<h1>鸟哥的讲解</h1>\n\n<p>例題： </p>\n\n<p>假設你的筆記型電腦安裝 CentOS 這套系統，而且選擇的時區為台灣。現在，你將有一個月的時間要出差到美國的紐約去， 你會帶著這個筆電，那麼到了美國之後，時間會不一致啊！你該如何手動的調整時間參數呢？</p>\n\n<p>答： </p>\n\n<p>因為時區資料檔在 <code>/usr/share/zoneinfo</code> 內，在該目錄內會找到 <code>/usr/share/zoneinfo/America/New_York</code> 這個時區檔。 而時區設定檔在 <code>/etc/sysconfig/clock</code> ，且目前的時間格式在 <code>/etc/localtime</code> ，所以你應該這樣做： </p>\n\n<pre><code>[root@www ~]# date\nThu Jul 28 15:08:39 CST 2011  &lt;==重點是 CST 這個時區喔！\n\n[root@www ~]# vim /etc/sysconfig/clock\nZONE=\"America/New_York\"       &lt;==改的是這裡啦！\n\n[root@www ~]# cp /usr/share/zoneinfo/America/New_York /etc/localtime\n[root@www ~]# date\nThu Jul 28 03:09:21 EDT 2011  &lt;==時區與時間都改變了！\n</code></pre>\n\n<p>這個範例做完之後，記得將這兩個檔案改回來！不然以後你的時間都是美國時間啦！ </p>\n\n<h1>参考文档</h1>\n\n<ul>\n<li><a href=\"http://linux.vbird.org/linux_server/0440ntp.php\">鸟哥的私房菜：时间服务器</a></li>\n<li><a href=\"http://www.eecis.udel.edu/~mills/ntp.html\">NTP Project</a></li>\n<li><a href=\"http://www.blogjava.net/spray/archive/2008/07/10/213964.html\">NTP常见错误</a></li>\n</ul>\n                 ", "more" : "nothing to do" }
{ "_id" : { "$oid" : "50fc06824f97311c5423d899" }, "status" : "published", "tags" : [ "python", "web.py", "Activist", "Web" ], "excerpt" : "\n最近虚拟化服务器出现时钟同步异常：定时同步，但发现时间比个人电脑时间相差10几个小时。看了下鸟哥的私房菜，觉得没太大问题，于是决定测试NTP服务以排查问题。因网络限制，无法连接到互联网，就采用其中的一台虚拟机作为NTP服务器，并以本机时间为准。测试后才知道原来是系统安装时没有选择时区（默认为美国纽约），而使用的NTP服务器时区为中国，所以导致虚拟化服务器时间相差13个小时。\n                 ", "date" : { "$date" : 1358694018008 }, "categories" : [ "阅读" ], "count" : "100", "author" : { "url" : "http://www.dylanninin.com", "name" : "dylan" }, "url" : "aaron-swartz-commits-suicide.html", "title" : "Aaron Swartz Commits Suicide", "content" : "\n  <h1>写在前面的话</h1>\n\n<p>学习Python的第一个Web框架就是<a href=\"http://webpy.org/\">web.py</a>，没想到它的作者Aaron Swartz已经于2013年1月11日自杀。\n2012年年末计划用Python将此博客重写，其中Web框架经过一翻<a href=\"http://wiki.woodpecker.org.cn/moin/PyWebFrameList\">选型</a>，便确定使用<a href=\"http://webpy.org/\">web.py</a>。本打算利用周末时间，希望能在年前完成，但因迫近年关诸事繁忙，现在才刚刚搭建起基本的项目框架。真是诸行无常，现在唯一能纪念的，就是作为一个程序员，学习吸收Aaron Swartz的思想，尽快的完成这个项目，并发布到<a href=\"http://github.com/\">github</a>，也算是对web.py的一种推介，对Aaron Swartz的一种追思。</p>\n\n<p><a href=\"http://e.weibo.com/programmermag\">@程序员杂志</a>：\n震惊！Aaron Swartz自杀身亡，年仅26。他是Reddit的联合创始人，web.py的设计者，14岁参与创造了RSS 1.0规范，又与John Gruber共同设计了Markdown。2011年曾因下载480万篇JSTOR学术论文而被捕。<a href=\"http://t.cn/zjrzsyb\">http://t.cn/zjrzsyb</a></p>\n\n<h1>News</h1>\n\n<p>Aaron Swartz commits suicide\nBy Anne Cai\nNEWS EDITOR; UPDATED AT 2:15 A.M. 1/12/13\nComputer activist Aaron H. Swartz committed suicide in New York City yesterday, Jan. 11, according to his uncle, Michael Wolf, in a comment to The Tech. Swartz was 26.</p>\n\n<p>&#8220;The tragic and heartbreaking information you received is, regrettably, true,&#8221; confirmed Swartz&#8217; attorney, Elliot R. Peters of Kecker and Van Nest, in an email to The Tech.</p>\n\n<p>Swartz was indicted in July 2011 by a federal grand jury for allegedly mass downloading documents from the JSTOR online journal archive with the intent to distribute them. He subsequently moved to Brooklyn, New York, where he then worked for Avaaz Foundation, a nonprofit &#8220;global web movement to bring people-powered politics to decision-making everywhere.&#8221; Swartz appeared in court on Sept. 24, 2012 and pleaded not guilty.</p>\n\n<p>The accomplished Swartz co-authored the now widely-used RSS 1.0 specification at age 14, was one of the three co-owners of the popular social news site Reddit, and completed a fellowship at Harvard&#8217;s Ethics Center Lab on Institutional Corruption. In 2010, he founded <a href=\"http://demandprogress.org/\">DemandProgress.org</a>, a &#8220;campaign against the Internet censorship bills SOPA/PIPA.&#8221;</p>\n\n<h1>About Aaron Swartz</h1>\n\n<p>Aaron Swartz is the founder of <a href=\"http://demandprogress.org\">Demand Progress</a>, which launched the campaign against the Internet censorship bills (SOPA/PIPA) and now has over a million members. He is also a Contributing Editor to <a href=\"http://thebaffler.com/\">The Baffler</a> and on the Council of Advisors to The Rules.</p>\n\n<p>He is a frequent television commentator and the author of numerous articles on a variety of topics, especially the corrupting influence of big money on institutions including <a href=\"http://aaronsw.jottit.com/rachelcarson\">nonprofits</a>, <a href=\"http://www.aaronsw.com/weblog/newobjectivity\">the media</a>, <a href=\"http://crookedtimber.org/2009/05/01/political-entrepreneurs-and-lunatics-with-money/\">politics</a>, and public opinion. From 2010-11, he researched these topics as a Fellow at the Harvard Ethics Center Lab on Institutional Corruption. He also served on the board of Change Congress, a good government nonprofit.</p>\n\n<p>He has also developed the site <a href=\"http://theinfo.org/\">theinfo.org</a>. His landmark analysis of Wikipedia, <a href=\"http://www.aaronsw.com/weblog/whowriteswikipedia\">Who Writes Wikipedia?</a>, has been widely cited.<a href=\"http://www.w3.org/2001/sw/RDFCore/members.html\"> Working with Web inventor Tim Berners-Lee at MIT</a>, he helped <a href=\"https://tools.ietf.org/html/rfc3870\">develop</a> and <a href=\"http://logicerror.com/semanticWeb-long\">popularize</a> standards for sharing data on the Web. He also coauthored the <a href=\"http://purl.org/rss/1.0/\">RSS 1.0 specification</a>, now widely used for publishing news stories.</p>\n\n<p>His piece with photographer Taryn Simon, Image Atlas (2012), is has <a href=\"http://www.newmuseum.org/exhibitions/view/taryn-simon-cultural-differences\">been featured</a> in the New Museum. In 2007, he led the development of the nonprofit Open Library, an ambitious project to collect information about every book ever published. He also cofounded the online news site Reddit, where he released as free software the web framework he developed, <a href=\"http://webpy.org/\">web.py</a>.</p>\n\n<h1>Reference</h1>\n\n<ul>\n<li>MIT News: <a href=\"http://tech.mit.edu/V132/N61/swartz.html?comments#comments\">Aaron Swartz commits suicide</a></li>\n<li>Site: <a href=\"http://www.aaronsw.com/\">Aaron Swartz</a></li>\n</ul>\n\n                 ", "more" : "nothing to do" }
